
plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
    id 'com.github.ben-manes.versions' version '0.51.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Analytics'
group = "analytics"
version = "0.1.0-SNAPSHOT"

def opentelemetryVersion = "1.40.0"
def opentelemetryInstrumentationVersion = "2.6.0"

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    Provider<Directory> output = layout.buildDirectory.dir("outputLocation")
    offlineCompile = output.get().asFile
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation platform("io.opentelemetry:opentelemetry-bom:${opentelemetryVersion}")
        implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${opentelemetryInstrumentationVersion}")

        implementation "javax.annotation:javax.annotation-api:1.3.2",
                "io.opentelemetry:opentelemetry-api",
                "io.opentelemetry:opentelemetry-sdk",
                "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations",
                "org.apache.logging.log4j:log4j-core:2.23.1",
                "dev.openfeature.contrib.providers:flagd:0.8.4",
                'dev.openfeature:sdk:1.9.0',
                'org.apache.activemq:artemis-jakarta-client-all:2.38.0'

        runtimeOnly "io.netty:netty-tcnative-boringssl-static:2.0.65.Final"
    }
}



googleJavaFormat {
    toolVersion '1.18.1'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'oteldemo'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.runtimeClasspath
    into offlineCompile
}

task analytics(type: CreateStartScripts) {
    mainClass.set('oteldemo.Analytics')
    applicationName = 'Analytics'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(analytics)
    fileMode = 0755
}
